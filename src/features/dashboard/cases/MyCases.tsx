import React, { useState, useCallback, useMemo, useEffect } from 'react'
import CasesTable from '@shared/components/cases/CasesTable'
import CaseDetailPanel from '@shared/components/cases/CaseDetailPanel'
import type { MedicalRecord } from '@lib/supabase-service'
import { useQuery, useQueryClient } from '@tanstack/react-query'
import { supabase } from '@lib/supabase/config'
import { useAuth } from '@app/providers/AuthContext'
import { useUserProfile } from '@shared/hooks/useUserProfile'
import DoctorFilterPanel from '@shared/components/cases/DoctorFilterPanel'

const MyCases: React.FC = React.memo(() => {
	const queryClient = useQueryClient()

	useEffect(() => {
		const channel = supabase
			.channel('realtime-my-cases')
			.on(
				'postgres_changes',
				{
					event: '*', // INSERT | UPDATE | DELETE
					schema: 'public',
					table: 'medical_records_clean',
				},
				() => {
					queryClient.invalidateQueries({ queryKey: ['my-medical-cases'] }) // tanstack refetch
				},
			)
			.subscribe()

		return () => {
			supabase.removeChannel(channel)
		}
	}, [queryClient])

	const [selectedCase, setSelectedCase] = useState<MedicalRecord | null>(null)
	const [isPanelOpen, setIsPanelOpen] = useState(false)
	const [isFullscreen, setIsFullscreen] = useState(false)
	const [selectedDoctors, setSelectedDoctors] = useState<string[]>([])
	const [showDoctorFilter] = useState(false)
	const { user } = useAuth()
	useUserProfile()

	// Query for fetching only cases generated by the current user (admin/doctor) - optimized
	const casesQueryResult = useQuery({
		queryKey: ['my-medical-cases'],
		queryFn: async () => {
			if (!user) return { data: [] }

			const { data, error } = await supabase
				.from('medical_records_clean')
				.select('*')
				.eq('generated_by', user.id)
				.order('created_at', { ascending: false })

			if (error) {
				throw error
			}

			return { data: data || [] }
		},
		staleTime: 1000 * 60 * 5, // 5 minutes
		enabled: !!user, // Only run query if user is logged in
		refetchOnWindowFocus: false, // Prevent refetching on window focus
		refetchOnReconnect: false, // Prevent refetching on reconnect
	})

	const { refetch, isLoading } = casesQueryResult
	const cases: MedicalRecord[] = useMemo(() => casesQueryResult.data?.data || [], [casesQueryResult.data])
	const error = casesQueryResult.error

	const handleCaseSelect = useCallback((case_: MedicalRecord) => {
		setSelectedCase(case_)
		setIsPanelOpen(true)
	}, [])

	const handlePanelClose = useCallback(() => {
		setIsPanelOpen(false)
		// Delay clearing selected case to allow animation to complete
		setTimeout(() => setSelectedCase(null), 300)
	}, [])

	// Handle doctor filter change
	const handleDoctorFilterChange = useCallback((doctors: string[]) => {
		setSelectedDoctors(doctors)
	}, [])

	// Filter cases by selected doctors
	const filteredCases = React.useMemo(() => {
		if (selectedDoctors.length === 0) return cases

		return cases.filter(
			(caseItem) => caseItem.treating_doctor && selectedDoctors.includes(caseItem.treating_doctor.trim()),
		)
	}, [cases, selectedDoctors])

	return (
		<div className="p-3 sm:p-6">
			{/* Page Title */}
			<div className="mb-4 sm:mb-6">
				<div>
					<h1 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-gray-100">Mis Casos Generados</h1>
					<div className="w-16 sm:w-24 h-1 bg-primary mt-2 rounded-full" />
				</div>
				{cases.length === 0 && !isLoading ? (
					<p className="text-sm text-gray-600 dark:text-gray-400 mt-1 sm:mt-2">
						No has generado ningún caso aún. Los casos aparecerán aquí cuando utilices el botón "Generar" en la sección
						de Casos.
					</p>
				) : (
					<p className="text-sm text-gray-600 dark:text-gray-400 mt-1 sm:mt-2">
						Aquí puedes ver todos los casos que has generado como médico
					</p>
				)}
			</div>

			{/* Doctor Filter Panel - Conditionally rendered */}
			{showDoctorFilter && (
				<div className="mb-4 sm:mb-6">
					<DoctorFilterPanel cases={cases} onFilterChange={handleDoctorFilterChange} />
				</div>
			)}

			{/* Cases Table */}
			<CasesTable
				onCaseSelect={handleCaseSelect}
				cases={filteredCases}
				isLoading={isLoading}
				error={error}
				refetch={refetch}
				isFullscreen={isFullscreen}
				setIsFullscreen={setIsFullscreen}
			/>

			{/* Case Detail Panel */}
			<CaseDetailPanel
				case_={selectedCase}
				isOpen={isPanelOpen}
				onClose={handlePanelClose}
				onCaseSelect={handleCaseSelect}
			/>
		</div>
	)
})

MyCases.displayName = 'MyCases'

export default MyCases
